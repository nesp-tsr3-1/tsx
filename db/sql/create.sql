-- MySQL Script generated by MySQL Workbench
-- Mon Sep 16 14:40:05 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema nesp
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Table `unit`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `unit` ;

CREATE TABLE IF NOT EXISTS `unit` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `description` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `search_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `search_type` ;

CREATE TABLE IF NOT EXISTS `search_type` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `description` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `source_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `source_type` ;

CREATE TABLE IF NOT EXISTS `source_type` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `description` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `monitoring_program`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `monitoring_program` ;

CREATE TABLE IF NOT EXISTS `monitoring_program` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `description` VARCHAR(255) NOT NULL,
  `summary` MEDIUMTEXT NULL,
  `lead` VARCHAR(255) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `data_processing_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `data_processing_type` ;

CREATE TABLE IF NOT EXISTS `data_processing_type` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `description` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `source`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `source` ;

CREATE TABLE IF NOT EXISTS `source` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `source_type_id` INT NULL,
  `provider` TEXT NULL,
  `description` TEXT NULL,
  `details` TEXT NULL,
  `notes` TEXT NULL,
  `authors` TEXT NULL,
  `contact_name` TEXT NULL,
  `contact_institution` TEXT NULL,
  `contact_position` TEXT NULL,
  `contact_email` TEXT NULL,
  `contact_phone` TEXT NULL,
  `monitoring_program_id` INT NULL,
  `monitoring_program_comments` TEXT NULL,
  `data_processing_type_id` INT NULL,
  `time_created` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `last_modified` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  INDEX `fk_Source_SourceType_idx` (`source_type_id` ASC) VISIBLE,
  INDEX `fk_source_monitoring_program1_idx` (`monitoring_program_id` ASC) VISIBLE,
  INDEX `fk_source_data_processing_type1_idx` (`data_processing_type_id` ASC) VISIBLE,
  CONSTRAINT `fk_Source_SourceType`
    FOREIGN KEY (`source_type_id`)
    REFERENCES `source_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_source_monitoring_program1`
    FOREIGN KEY (`monitoring_program_id`)
    REFERENCES `monitoring_program` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE,
  CONSTRAINT `fk_source_data_processing_type1`
    FOREIGN KEY (`data_processing_type_id`)
    REFERENCES `data_processing_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `intensive_management`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `intensive_management` ;

CREATE TABLE IF NOT EXISTS `intensive_management` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `description` VARCHAR(255) NULL,
  `grouping` VARCHAR(255) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `data_import_status`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `data_import_status` ;

CREATE TABLE IF NOT EXISTS `data_import_status` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `description` VARCHAR(255) NULL,
  `code` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `code_UNIQUE` (`code` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `user` ;

CREATE TABLE IF NOT EXISTS `user` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(255) NULL COMMENT '	',
  `password_hash` TEXT NULL,
  `first_name` TEXT NULL,
  `last_name` TEXT NULL,
  `phone_number` VARCHAR(32) NULL,
  `password_reset_code` VARCHAR(32) NULL,
  `time_created` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  `last_modified` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `data_import`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `data_import` ;

CREATE TABLE IF NOT EXISTS `data_import` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `source_id` INT NULL,
  `status_id` INT NULL,
  `upload_uuid` VARCHAR(36) NULL,
  `filename` TEXT NULL,
  `error_count` INT NULL,
  `warning_count` INT NULL,
  `data_type` INT NOT NULL,
  `user_id` INT NULL,
  `time_created` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `last_modified` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  INDEX `fk_data_import_source1_idx` (`source_id` ASC) VISIBLE,
  INDEX `fk_data_import_data_import_status1_idx` (`status_id` ASC) VISIBLE,
  INDEX `fk_data_import_user1_idx` (`user_id` ASC) VISIBLE,
  CONSTRAINT `fk_data_import_source1`
    FOREIGN KEY (`source_id`)
    REFERENCES `source` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_data_import_data_import_status1`
    FOREIGN KEY (`status_id`)
    REFERENCES `data_import_status` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_data_import_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `management`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `management` ;

CREATE TABLE IF NOT EXISTS `management` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `description` VARCHAR(255) NOT NULL,
  `type` VARCHAR(255) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `t1_site`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `t1_site` ;

CREATE TABLE IF NOT EXISTS `t1_site` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `source_id` INT NOT NULL,
  `data_import_id` INT NULL,
  `name` VARCHAR(255) NULL,
  `search_type_id` INT NOT NULL,
  `notes` TEXT NULL,
  `intensive_management_id` INT NULL,
  `management_id` INT NULL,
  `management_comments` TEXT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_T1Site_Source1_idx` (`source_id` ASC) VISIBLE,
  INDEX `fk_T1Site_SearchType1_idx` (`search_type_id` ASC) VISIBLE,
  INDEX `fk_t1_site_intensive_management1_idx` (`intensive_management_id` ASC) VISIBLE,
  INDEX `fk_t1_site_data_import1_idx` (`data_import_id` ASC) VISIBLE,
  INDEX `fk_t1_site_management1_idx` (`management_id` ASC) VISIBLE,
  CONSTRAINT `fk_T1Site_Source1`
    FOREIGN KEY (`source_id`)
    REFERENCES `source` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_T1Site_SearchType1`
    FOREIGN KEY (`search_type_id`)
    REFERENCES `search_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t1_site_intensive_management1`
    FOREIGN KEY (`intensive_management_id`)
    REFERENCES `intensive_management` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t1_site_data_import1`
    FOREIGN KEY (`data_import_id`)
    REFERENCES `data_import` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t1_site_management1`
    FOREIGN KEY (`management_id`)
    REFERENCES `management` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `t1_survey`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `t1_survey` ;

CREATE TABLE IF NOT EXISTS `t1_survey` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `site_id` INT NOT NULL,
  `source_id` INT NOT NULL,
  `data_import_id` INT NULL,
  `source_primary_key` VARCHAR(255) NOT NULL,
  `start_date_d` SMALLINT NULL,
  `start_date_m` SMALLINT NULL,
  `start_date_y` SMALLINT NOT NULL,
  `finish_date_d` SMALLINT NULL,
  `finish_date_m` SMALLINT NULL,
  `finish_date_y` SMALLINT NULL,
  `start_time` TIME NULL,
  `finish_time` TIME NULL,
  `duration_in_minutes` INT NULL,
  `area_in_m2` DOUBLE NULL,
  `length_in_km` DOUBLE NULL,
  `number_of_traps_per_day` INT NULL,
  `coords` POINT NOT NULL,
  `location` TEXT NULL,
  `positional_accuracy_in_m` DOUBLE NULL,
  `comments` TEXT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_T1Survey_T1Site1_idx` (`site_id` ASC) VISIBLE,
  INDEX `fk_T1Survey_Source1_idx` (`source_id` ASC) VISIBLE,
  UNIQUE INDEX `source_primary_key_UNIQUE` (`source_primary_key` ASC) VISIBLE,
  INDEX `fk_t1_survey_data_import1_idx` (`data_import_id` ASC) VISIBLE,
  CONSTRAINT `fk_T1Survey_T1Site1`
    FOREIGN KEY (`site_id`)
    REFERENCES `t1_site` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_T1Survey_Source1`
    FOREIGN KEY (`source_id`)
    REFERENCES `source` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t1_survey_data_import1`
    FOREIGN KEY (`data_import_id`)
    REFERENCES `data_import` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `taxon_level`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `taxon_level` ;

CREATE TABLE IF NOT EXISTS `taxon_level` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `description` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `taxon_status`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `taxon_status` ;

CREATE TABLE IF NOT EXISTS `taxon_status` (
  `id` INT NOT NULL,
  `description` VARCHAR(255) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `taxon`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `taxon` ;

CREATE TABLE IF NOT EXISTS `taxon` (
  `id` CHAR(8) NOT NULL,
  `ultrataxon` TINYINT(1) NOT NULL,
  `taxon_level_id` INT NULL,
  `spno` SMALLINT NULL,
  `common_name` VARCHAR(255) NULL,
  `scientific_name` VARCHAR(255) NOT NULL,
  `family_common_name` VARCHAR(255) NULL,
  `family_scientific_name` VARCHAR(255) NULL,
  `order` VARCHAR(255) NULL,
  `population` VARCHAR(255) NULL,
  `epbc_status_id` INT NULL,
  `iucn_status_id` INT NULL,
  `state_status_id` INT NULL,
  `bird_action_plan_status_id` INT NULL,
  `max_status_id` INT GENERATED ALWAYS AS (NULLIF(GREATEST(COALESCE(taxon.epbc_status_id, 0), COALESCE(taxon.iucn_status_id, 0), COALESCE(taxon.bird_action_plan_status_id, 0)), 0)),
  `national_priority` TINYINT(1) NOT NULL DEFAULT 0,
  `taxonomic_group` VARCHAR(255) NOT NULL,
  `suppress_spatial_representativeness` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  INDEX `fk_Taxon_TaxonLevel1_idx` (`taxon_level_id` ASC) VISIBLE,
  INDEX `fk_taxon_taxon_status2_idx` (`epbc_status_id` ASC) VISIBLE,
  INDEX `fk_taxon_taxon_status3_idx` (`iucn_status_id` ASC) VISIBLE,
  INDEX `fk_taxon_taxon_status4_idx` (`state_status_id` ASC) VISIBLE,
  INDEX `fk_taxon_taxon_status1_idx` (`bird_action_plan_status_id` ASC) VISIBLE,
  INDEX `spno` (`spno` ASC) VISIBLE,
  CONSTRAINT `fk_Taxon_TaxonLevel1`
    FOREIGN KEY (`taxon_level_id`)
    REFERENCES `taxon_level` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_taxon_taxon_status2`
    FOREIGN KEY (`epbc_status_id`)
    REFERENCES `taxon_status` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_taxon_taxon_status3`
    FOREIGN KEY (`iucn_status_id`)
    REFERENCES `taxon_status` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_taxon_taxon_status4`
    FOREIGN KEY (`state_status_id`)
    REFERENCES `taxon_status` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_taxon_taxon_status1`
    FOREIGN KEY (`bird_action_plan_status_id`)
    REFERENCES `taxon_status` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `taxon_hybrid`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `taxon_hybrid` ;

CREATE TABLE IF NOT EXISTS `taxon_hybrid` (
  `id` CHAR(12) NOT NULL COMMENT 'e.g. u123a.b.c',
  `taxon_id` CHAR(8) NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_TaxonHybrid_Taxon1_idx` (`taxon_id` ASC) VISIBLE,
  CONSTRAINT `fk_TaxonHybrid_Taxon1`
    FOREIGN KEY (`taxon_id`)
    REFERENCES `taxon` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `unit_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `unit_type` ;

CREATE TABLE IF NOT EXISTS `unit_type` (
  `id` INT NOT NULL,
  `description` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `t1_sighting`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `t1_sighting` ;

CREATE TABLE IF NOT EXISTS `t1_sighting` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `survey_id` INT NOT NULL,
  `taxon_id` CHAR(8) NOT NULL,
  `count` DOUBLE NOT NULL,
  `unit_id` INT NOT NULL,
  `unit_type_id` INT NULL,
  `breeding` TINYINT(1) NULL,
  `comments` TEXT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_T1Sighting_T1Survey1_idx` (`survey_id` ASC) VISIBLE,
  INDEX `fk_T1Sighting_Taxon1_idx` (`taxon_id` ASC) VISIBLE,
  INDEX `fk_T1Sighting_Unit1_idx` (`unit_id` ASC) VISIBLE,
  INDEX `fk_t1_sighting_unit_type1_idx` (`unit_type_id` ASC) VISIBLE,
  CONSTRAINT `fk_T1Sighting_T1Survey1`
    FOREIGN KEY (`survey_id`)
    REFERENCES `t1_survey` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_T1Sighting_Taxon1`
    FOREIGN KEY (`taxon_id`)
    REFERENCES `taxon` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_T1Sighting_Unit1`
    FOREIGN KEY (`unit_id`)
    REFERENCES `unit` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t1_sighting_unit_type1`
    FOREIGN KEY (`unit_type_id`)
    REFERENCES `unit_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `incidental_sighting`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `incidental_sighting` ;

CREATE TABLE IF NOT EXISTS `incidental_sighting` (
  `taxon_id` CHAR(8) NOT NULL,
  `coords` POINT NULL,
  `date` DATE NULL,
  INDEX `fk_incidental_sighting_taxon1_idx` (`taxon_id` ASC) VISIBLE,
  CONSTRAINT `fk_incidental_sighting_taxon1`
    FOREIGN KEY (`taxon_id`)
    REFERENCES `taxon` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `t2_site`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `t2_site` ;

CREATE TABLE IF NOT EXISTS `t2_site` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `source_id` INT NULL,
  `data_import_id` INT NULL,
  `name` VARCHAR(255) NULL,
  `search_type_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_t2_site_search_type1_idx` (`search_type_id` ASC) VISIBLE,
  INDEX `fk_t2_site_source1_idx` (`source_id` ASC) VISIBLE,
  INDEX `source_name` (`source_id` ASC, `name` ASC) VISIBLE,
  INDEX `fk_t2_site_data_import1_idx` (`data_import_id` ASC) VISIBLE,
  CONSTRAINT `fk_t2_site_search_type1`
    FOREIGN KEY (`search_type_id`)
    REFERENCES `search_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t2_site_source1`
    FOREIGN KEY (`source_id`)
    REFERENCES `source` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t2_site_data_import1`
    FOREIGN KEY (`data_import_id`)
    REFERENCES `data_import` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `t2_survey`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `t2_survey` ;

CREATE TABLE IF NOT EXISTS `t2_survey` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `site_id` INT NULL,
  `source_id` INT NOT NULL,
  `data_import_id` INT NULL,
  `start_date_d` SMALLINT NULL,
  `start_date_m` SMALLINT NULL,
  `start_date_y` SMALLINT NOT NULL,
  `finish_date_d` SMALLINT NULL,
  `finish_date_m` SMALLINT NULL,
  `finish_date_y` SMALLINT NULL,
  `start_time` TIME NULL,
  `finish_time` TIME NULL,
  `duration_in_minutes` INT NULL,
  `area_in_m2` DOUBLE NULL,
  `length_in_km` DOUBLE NULL,
  `coords` POINT NOT NULL,
  `location` TEXT NULL,
  `positional_accuracy_in_m` DOUBLE NULL,
  `comments` TEXT NULL,
  `search_type_id` INT NOT NULL,
  `source_primary_key` VARCHAR(255) NOT NULL,
  `secondary_source_id` VARCHAR(255) NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_T1Survey_Source1_idx` (`source_id` ASC) VISIBLE,
  INDEX `fk_T2Survey_SearchType1_idx` (`search_type_id` ASC) VISIBLE,
  UNIQUE INDEX `source_primary_key_UNIQUE` (`source_primary_key` ASC) VISIBLE,
  INDEX `fk_t2_survey_t2_site1_idx` (`site_id` ASC) VISIBLE,
  INDEX `fk_t2_survey_data_import1_idx` (`data_import_id` ASC) VISIBLE,
  CONSTRAINT `fk_T1Survey_Source10`
    FOREIGN KEY (`source_id`)
    REFERENCES `source` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_T2Survey_SearchType1`
    FOREIGN KEY (`search_type_id`)
    REFERENCES `search_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t2_survey_t2_site1`
    FOREIGN KEY (`site_id`)
    REFERENCES `t2_site` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t2_survey_data_import1`
    FOREIGN KEY (`data_import_id`)
    REFERENCES `data_import` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `t2_survey_site`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `t2_survey_site` ;

CREATE TABLE IF NOT EXISTS `t2_survey_site` (
  `survey_id` INT NOT NULL,
  `site_id` INT NOT NULL,
  INDEX `fk_T2SurveySite_T2Site1_idx` (`site_id` ASC) VISIBLE,
  PRIMARY KEY (`survey_id`, `site_id`),
  CONSTRAINT `fk_T2SurveySite_T2Survey1`
    FOREIGN KEY (`survey_id`)
    REFERENCES `t2_survey` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_T2SurveySite_T2Site1`
    FOREIGN KEY (`site_id`)
    REFERENCES `t2_site` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `t2_sighting`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `t2_sighting` ;

CREATE TABLE IF NOT EXISTS `t2_sighting` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `survey_id` INT NOT NULL,
  `taxon_id` CHAR(8) NOT NULL,
  `count` DOUBLE NULL,
  `unit_id` INT NULL,
  `breeding` TINYINT(1) NULL,
  `unit_type_id` INT NULL,
  `comments` TEXT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_T2Sighting_T2Survey1_idx` (`survey_id` ASC) VISIBLE,
  INDEX `fk_T2Sighting_Unit1_idx` (`unit_id` ASC) VISIBLE,
  INDEX `fk_T2Sighting_Taxon1_idx` (`taxon_id` ASC) VISIBLE,
  INDEX `fk_t2_sighting_unit_type1_idx` (`unit_type_id` ASC) VISIBLE,
  CONSTRAINT `fk_T2Sighting_T2Survey1`
    FOREIGN KEY (`survey_id`)
    REFERENCES `t2_survey` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_T2Sighting_Unit1`
    FOREIGN KEY (`unit_id`)
    REFERENCES `unit` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_T2Sighting_Taxon1`
    FOREIGN KEY (`taxon_id`)
    REFERENCES `taxon` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t2_sighting_unit_type1`
    FOREIGN KEY (`unit_type_id`)
    REFERENCES `unit_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `range`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `range` ;

CREATE TABLE IF NOT EXISTS `range` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `description` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `t2_ultrataxon_sighting`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `t2_ultrataxon_sighting` ;

CREATE TABLE IF NOT EXISTS `t2_ultrataxon_sighting` (
  `sighting_id` INT NOT NULL,
  `taxon_id` CHAR(8) NOT NULL,
  `range_id` INT NOT NULL,
  `generated_subspecies` TINYINT(1) NOT NULL,
  INDEX `fk_T2SightingRangeType_RangeType1_idx` (`range_id` ASC) VISIBLE,
  PRIMARY KEY (`sighting_id`, `taxon_id`),
  INDEX `fk_T2ProcessedSighting_Taxon1_idx` (`taxon_id` ASC) VISIBLE,
  CONSTRAINT `fk_T2SightingRangeType_RangeType1`
    FOREIGN KEY (`range_id`)
    REFERENCES `range` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_T2ProcessedSighting_T2Sighting1`
    FOREIGN KEY (`sighting_id`)
    REFERENCES `t2_sighting` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_T2ProcessedSighting_Taxon1`
    FOREIGN KEY (`taxon_id`)
    REFERENCES `taxon` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `taxon_presence_alpha_hull`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `taxon_presence_alpha_hull` ;

CREATE TABLE IF NOT EXISTS `taxon_presence_alpha_hull` (
  `taxon_id` CHAR(8) NOT NULL,
  `range_id` INT NOT NULL,
  `breeding_range_id` INT NULL,
  `geometry` GEOMETRY NOT NULL,
  INDEX `fk_taxon_presence_alpha_hull_range1_idx` (`range_id` ASC) VISIBLE,
  CONSTRAINT `fk_taxon_presence_alpha_hull_taxon1`
    FOREIGN KEY (`taxon_id`)
    REFERENCES `taxon` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_taxon_presence_alpha_hull_range1`
    FOREIGN KEY (`range_id`)
    REFERENCES `range` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `t2_processed_survey`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `t2_processed_survey` ;

CREATE TABLE IF NOT EXISTS `t2_processed_survey` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `raw_survey_id` INT NOT NULL,
  `site_id` INT NULL,
  `search_type_id` INT NOT NULL,
  `start_date_y` SMALLINT NOT NULL,
  `start_date_m` SMALLINT NULL,
  `source_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_t2_processed_survey_t2_survey1_idx` (`raw_survey_id` ASC) VISIBLE,
  INDEX `fk_t2_processed_survey_t2_site1_idx` (`site_id` ASC) VISIBLE,
  INDEX `fk_t2_processed_survey_source1_idx` (`source_id` ASC) VISIBLE,
  CONSTRAINT `fk_t2_processed_survey_t2_survey1`
    FOREIGN KEY (`raw_survey_id`)
    REFERENCES `t2_survey` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t2_processed_survey_t2_site1`
    FOREIGN KEY (`site_id`)
    REFERENCES `t2_site` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t2_processed_survey_source1`
    FOREIGN KEY (`source_id`)
    REFERENCES `source` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `response_variable_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `response_variable_type` ;

CREATE TABLE IF NOT EXISTS `response_variable_type` (
  `id` INT NOT NULL,
  `description` VARCHAR(255) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `state`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `state` ;

CREATE TABLE IF NOT EXISTS `state` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NULL,
  `geometry` MULTIPOLYGON NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `region`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `region` ;

CREATE TABLE IF NOT EXISTS `region` (
  `id` INT NOT NULL,
  `name` VARCHAR(255) NULL,
  `geometry` MULTIPOLYGON NOT NULL,
  `state` VARCHAR(255) NULL,
  `positional_accuracy_in_m` INT NULL,
  `centroid` POINT GENERATED ALWAYS AS (ST_Centroid(geometry)) STORED,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `taxon_range`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `taxon_range` ;

CREATE TABLE IF NOT EXISTS `taxon_range` (
  `taxon_id` CHAR(8) NOT NULL,
  `range_id` INT NOT NULL,
  `breeding_range_id` INT NULL,
  `geometry` MULTIPOLYGON NOT NULL,
  INDEX `fk_taxon_range_range1_idx` (`range_id` ASC) VISIBLE,
  INDEX `fk_taxon_range_range2_idx` (`breeding_range_id` ASC) VISIBLE,
  INDEX `fk_taxon_range_taxon1_idx` (`taxon_id` ASC) VISIBLE,
  CONSTRAINT `fk_taxon_range_range1`
    FOREIGN KEY (`range_id`)
    REFERENCES `range` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_taxon_range_range2`
    FOREIGN KEY (`breeding_range_id`)
    REFERENCES `range` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_taxon_range_taxon1`
    FOREIGN KEY (`taxon_id`)
    REFERENCES `taxon` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `taxon_range_subdiv`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `taxon_range_subdiv` ;

CREATE TABLE IF NOT EXISTS `taxon_range_subdiv` (
  `taxon_id` CHAR(8) NOT NULL,
  `range_id` INT NOT NULL,
  `breeding_range_id` INT NULL,
  `geometry` MULTIPOLYGON NOT NULL,
  INDEX `fk_taxon_range_range1_idx` (`range_id` ASC) VISIBLE,
  INDEX `fk_taxon_range_range2_idx` (`breeding_range_id` ASC) VISIBLE,
  INDEX `fk_taxon_range_taxon1_idx` (`taxon_id` ASC) VISIBLE,
  CONSTRAINT `fk_taxon_range_range10`
    FOREIGN KEY (`range_id`)
    REFERENCES `range` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_taxon_range_range20`
    FOREIGN KEY (`breeding_range_id`)
    REFERENCES `range` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_taxon_range_taxon10`
    FOREIGN KEY (`taxon_id`)
    REFERENCES `taxon` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `taxon_presence_alpha_hull_subdiv`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `taxon_presence_alpha_hull_subdiv` ;

CREATE TABLE IF NOT EXISTS `taxon_presence_alpha_hull_subdiv` (
  `taxon_id` CHAR(8) NOT NULL,
  `range_id` INT NOT NULL,
  `breeding_range_id` INT NULL,
  `geometry` GEOMETRY NOT NULL,
  INDEX `fk_taxon_presence_alpha_hull_range1_idx` (`range_id` ASC) VISIBLE,
  CONSTRAINT `fk_taxon_presence_alpha_hull_taxon10`
    FOREIGN KEY (`taxon_id`)
    REFERENCES `taxon` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_taxon_presence_alpha_hull_range10`
    FOREIGN KEY (`range_id`)
    REFERENCES `range` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `t2_processed_sighting`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `t2_processed_sighting` ;

CREATE TABLE IF NOT EXISTS `t2_processed_sighting` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `survey_id` INT NOT NULL,
  `taxon_id` CHAR(8) NOT NULL,
  `count` DOUBLE NOT NULL,
  `unit_id` INT NOT NULL,
  `pseudo_absence` TINYINT(1) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `survey_id_taxon_id` (`survey_id` ASC, `taxon_id` ASC) VISIBLE,
  INDEX `fk_t2_processed_sighting_unit1_idx` (`unit_id` ASC) VISIBLE,
  INDEX `fk_t2_processed_sighting_taxon1_idx` (`taxon_id` ASC) VISIBLE,
  CONSTRAINT `fk_t2_processed_sighting_unit1`
    FOREIGN KEY (`unit_id`)
    REFERENCES `unit` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t2_processed_sighting_t2_processed_survey1`
    FOREIGN KEY (`survey_id`)
    REFERENCES `t2_processed_survey` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t2_processed_sighting_taxon1`
    FOREIGN KEY (`taxon_id`)
    REFERENCES `taxon` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `aggregated_by_month`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `aggregated_by_month` ;

CREATE TABLE IF NOT EXISTS `aggregated_by_month` (
  `start_date_y` SMALLINT NOT NULL,
  `start_date_m` SMALLINT NULL,
  `site_id` INT NULL,
  `search_type_id` INT NULL,
  `taxon_id` CHAR(8) NOT NULL,
  `response_variable_type_id` INT NOT NULL,
  `value` DOUBLE NOT NULL,
  `data_type` INT NOT NULL,
  `source_id` INT NOT NULL,
  `region_id` INT NULL,
  `unit_id` INT NOT NULL,
  `positional_accuracy_in_m` DOUBLE NULL,
  `centroid_coords` POINT NOT NULL,
  `survey_count` INT NOT NULL,
  `time_series_id` VARCHAR(32) GENERATED ALWAYS AS (CONCAT(source_id, '_', unit_id, '_', COALESCE(search_type_id, '0'), '_', site_id, '_', taxon_id)),
  INDEX `fk_aggregated_by_month_search_type1_idx` (`search_type_id` ASC) VISIBLE,
  INDEX `fk_aggregated_by_month_taxon1_idx` (`taxon_id` ASC) VISIBLE,
  INDEX `fk_aggregated_by_month_source1_idx` (`source_id` ASC) VISIBLE,
  INDEX `fk_aggregated_by_month_response_variable_type1_idx` (`response_variable_type_id` ASC) VISIBLE,
  INDEX `fk_aggregated_by_month_unit1_idx` (`unit_id` ASC) VISIBLE,
  INDEX `fk_aggregated_by_month_region1_idx` (`region_id` ASC) VISIBLE,
  CONSTRAINT `fk_aggregated_by_month_search_type1`
    FOREIGN KEY (`search_type_id`)
    REFERENCES `search_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_aggregated_by_month_taxon1`
    FOREIGN KEY (`taxon_id`)
    REFERENCES `taxon` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_aggregated_by_month_source1`
    FOREIGN KEY (`source_id`)
    REFERENCES `source` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_aggregated_by_month_response_variable_type1`
    FOREIGN KEY (`response_variable_type_id`)
    REFERENCES `response_variable_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_aggregated_by_month_unit1`
    FOREIGN KEY (`unit_id`)
    REFERENCES `unit` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_aggregated_by_month_region1`
    FOREIGN KEY (`region_id`)
    REFERENCES `region` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `aggregated_by_year`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `aggregated_by_year` ;

CREATE TABLE IF NOT EXISTS `aggregated_by_year` (
  `start_date_y` SMALLINT NOT NULL,
  `site_id` INT NULL,
  `search_type_id` INT NULL,
  `taxon_id` CHAR(8) NOT NULL,
  `response_variable_type_id` INT NOT NULL,
  `value` DOUBLE NOT NULL,
  `data_type` INT NOT NULL,
  `source_id` INT NOT NULL,
  `region_id` INT NULL,
  `unit_id` INT NOT NULL,
  `positional_accuracy_in_m` DOUBLE NULL,
  `centroid_coords` POINT NOT NULL,
  `survey_count` INT NOT NULL,
  `time_series_id` VARCHAR(32) GENERATED ALWAYS AS (CONCAT(source_id, '_', unit_id, '_', COALESCE(search_type_id, '0'), '_', site_id, '_', taxon_id)),
  `include_in_analysis` TINYINT(1) NOT NULL DEFAULT 0,
  INDEX `fk_aggregated_by_year_search_type1_idx` (`search_type_id` ASC) VISIBLE,
  INDEX `fk_aggregated_by_year_taxon1_idx` (`taxon_id` ASC) VISIBLE,
  INDEX `fk_aggregated_by_year_source1_idx` (`source_id` ASC) VISIBLE,
  INDEX `fk_aggregated_by_year_response_variable_type1_idx` (`response_variable_type_id` ASC) VISIBLE,
  INDEX `fk_aggregated_by_year_unit1_idx` (`unit_id` ASC) VISIBLE,
  INDEX `fk_aggregated_by_year_region1_idx` (`region_id` ASC) VISIBLE,
  CONSTRAINT `fk_aggregated_by_year_search_type1`
    FOREIGN KEY (`search_type_id`)
    REFERENCES `search_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_aggregated_by_year_taxon1`
    FOREIGN KEY (`taxon_id`)
    REFERENCES `taxon` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_aggregated_by_year_source1`
    FOREIGN KEY (`source_id`)
    REFERENCES `source` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_aggregated_by_year_response_variable_type1`
    FOREIGN KEY (`response_variable_type_id`)
    REFERENCES `response_variable_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_aggregated_by_year_unit1`
    FOREIGN KEY (`unit_id`)
    REFERENCES `unit` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_aggregated_by_year_region1`
    FOREIGN KEY (`region_id`)
    REFERENCES `region` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `region_subdiv`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `region_subdiv` ;

CREATE TABLE IF NOT EXISTS `region_subdiv` (
  `id` INT NOT NULL,
  `name` VARCHAR(255) NULL,
  `geometry` MULTIPOLYGON NOT NULL)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `processing_method`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `processing_method` ;

CREATE TABLE IF NOT EXISTS `processing_method` (
  `taxon_id` CHAR(8) NOT NULL,
  `unit_id` INT NULL,
  `source_id` INT NOT NULL,
  `search_type_id` INT NULL,
  `data_type` INT NOT NULL,
  `response_variable_type_id` INT NOT NULL,
  `positional_accuracy_threshold_in_m` DOUBLE NULL,
  INDEX `fk_processing_method_unit1_idx` (`unit_id` ASC) VISIBLE,
  INDEX `fk_processing_method_source1_idx` (`source_id` ASC) VISIBLE,
  INDEX `fk_processing_method_search_type1_idx` (`search_type_id` ASC) VISIBLE,
  UNIQUE INDEX `uniq` (`taxon_id` ASC, `unit_id` ASC, `source_id` ASC, `search_type_id` ASC, `data_type` ASC) VISIBLE,
  CONSTRAINT `fk_processing_method_taxon1`
    FOREIGN KEY (`taxon_id`)
    REFERENCES `taxon` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_processing_method_unit1`
    FOREIGN KEY (`unit_id`)
    REFERENCES `unit` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_processing_method_source1`
    FOREIGN KEY (`source_id`)
    REFERENCES `source` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_processing_method_search_type1`
    FOREIGN KEY (`search_type_id`)
    REFERENCES `search_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `taxon_source_alpha_hull`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `taxon_source_alpha_hull` ;

CREATE TABLE IF NOT EXISTS `taxon_source_alpha_hull` (
  `taxon_id` CHAR(8) NOT NULL,
  `source_id` INT NOT NULL,
  `data_type` VARCHAR(255) NOT NULL,
  `geometry` MULTIPOLYGON NULL,
  `core_range_area_in_m2` DOUBLE NOT NULL,
  `alpha_hull_area_in_m2` DOUBLE NULL,
  PRIMARY KEY (`taxon_id`, `source_id`, `data_type`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `data_source`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `data_source` ;

CREATE TABLE IF NOT EXISTS `data_source` (
  `source_id` INT NOT NULL,
  `taxon_id` CHAR(8) NOT NULL,
  `data_agreement_id` INT NULL,
  `objective_of_monitoring_id` INT NULL,
  `absences_recorded` TINYINT(1) NULL,
  `standardisation_of_method_effort_id` INT NULL,
  `consistency_of_monitoring_id` INT NULL,
  `exclude_from_analysis` TINYINT(1) NOT NULL,
  `start_year` INT(4) NULL,
  `end_year` INT(4) NULL,
  `suppress_aggregated_data` TINYINT(1) NOT NULL,
  `citation` TEXT NULL,
  PRIMARY KEY (`source_id`, `taxon_id`),
  INDEX `fk_data_source_taxon1_idx` (`taxon_id` ASC) VISIBLE,
  CONSTRAINT `fk_data_source_source1`
    FOREIGN KEY (`source_id`)
    REFERENCES `source` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_data_source_taxon1`
    FOREIGN KEY (`taxon_id`)
    REFERENCES `taxon` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `projection_name`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `projection_name` ;

CREATE TABLE IF NOT EXISTS `projection_name` (
  `name` VARCHAR(64) NOT NULL,
  `epsg_srid` INT NOT NULL,
  PRIMARY KEY (`name`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `taxon_group`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `taxon_group` ;

CREATE TABLE IF NOT EXISTS `taxon_group` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `taxon_id` CHAR(8) NOT NULL,
  `group_name` VARCHAR(255) NOT NULL,
  `subgroup_name` VARCHAR(255) NULL,
  INDEX `fk_taxon_group_taxon1_idx` (`taxon_id` ASC) VISIBLE,
  UNIQUE INDEX `taxon_group_subgroup` (`taxon_id` ASC, `group_name` ASC, `subgroup_name` ASC) VISIBLE,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_taxon_group_taxon1`
    FOREIGN KEY (`taxon_id`)
    REFERENCES `taxon` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `role`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `role` ;

CREATE TABLE IF NOT EXISTS `role` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `description` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `name_UNIQUE` (`description` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `user_role`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `user_role` ;

CREATE TABLE IF NOT EXISTS `user_role` (
  `user_id` INT NOT NULL,
  `role_id` INT NOT NULL,
  PRIMARY KEY (`user_id`, `role_id`),
  INDEX `fk_user_role_role1_idx` (`role_id` ASC) VISIBLE,
  CONSTRAINT `fk_user_role_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_role_role1`
    FOREIGN KEY (`role_id`)
    REFERENCES `role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `user_source`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `user_source` ;

CREATE TABLE IF NOT EXISTS `user_source` (
  `user_id` INT NOT NULL,
  `source_id` INT NOT NULL,
  PRIMARY KEY (`user_id`, `source_id`),
  INDEX `fk_user_source_source1_idx` (`source_id` ASC) VISIBLE,
  CONSTRAINT `fk_user_source_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_source_source1`
    FOREIGN KEY (`source_id`)
    REFERENCES `source` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `data_processing_notes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `data_processing_notes` ;

CREATE TABLE IF NOT EXISTS `data_processing_notes` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `user_id` INT NOT NULL,
  `source_id` INT NOT NULL,
  `time_created` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `notes` TEXT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_data_processing_notes_user1_idx` (`user_id` ASC) VISIBLE,
  INDEX `fk_data_processing_notes_source1_idx` (`source_id` ASC) VISIBLE,
  CONSTRAINT `fk_data_processing_notes_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_data_processing_notes_source1`
    FOREIGN KEY (`source_id`)
    REFERENCES `source` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `user_program_manager`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `user_program_manager` ;

CREATE TABLE IF NOT EXISTS `user_program_manager` (
  `user_id` INT NOT NULL,
  `monitoring_program_id` INT NOT NULL,
  PRIMARY KEY (`user_id`, `monitoring_program_id`),
  INDEX `fk_user_program_manager_user1_idx` (`user_id` ASC) VISIBLE,
  INDEX `fk_user_program_manager_monitoring_program1_idx` (`monitoring_program_id` ASC) VISIBLE,
  CONSTRAINT `fk_user_program_manager_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `user` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_user_program_manager_monitoring_program1`
    FOREIGN KEY (`monitoring_program_id`)
    REFERENCES `monitoring_program` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `t1_survey_region`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `t1_survey_region` ;

CREATE TABLE IF NOT EXISTS `t1_survey_region` (
  `survey_id` INT NOT NULL,
  `region_id` INT NOT NULL,
  INDEX `fk_t1_survey_region_t1_survey1_idx` (`survey_id` ASC) VISIBLE,
  INDEX `fk_t1_survey_region_region1_idx` (`region_id` ASC) VISIBLE,
  PRIMARY KEY (`survey_id`),
  CONSTRAINT `fk_t1_survey_region_t1_survey1`
    FOREIGN KEY (`survey_id`)
    REFERENCES `t1_survey` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t1_survey_region_region1`
    FOREIGN KEY (`region_id`)
    REFERENCES `region` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `time_series_inclusion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `time_series_inclusion` ;

CREATE TABLE IF NOT EXISTS `time_series_inclusion` (
  `time_series_id` VARCHAR(32) NOT NULL,
  `sample_years` TINYINT(1) NOT NULL,
  `master_list_include` TINYINT(1) NOT NULL,
  `search_type` TINYINT(1) NOT NULL,
  `taxon_status` TINYINT(1) NOT NULL,
  `region` TINYINT(1) NOT NULL,
  `data_agreement` TINYINT(1) NOT NULL,
  `standardisation_of_method_effort` TINYINT(1) NOT NULL,
  `consistency_of_monitoring` TINYINT(1) NOT NULL,
  `non_zero` TINYINT(1) NOT NULL,
  `include_in_analysis` TINYINT(1) GENERATED ALWAYS AS (sample_years AND master_list_include AND search_type AND taxon_status AND region AND data_agreement AND standardisation_of_method_effort AND consistency_of_monitoring AND non_zero),
  PRIMARY KEY (`time_series_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `feedback_status`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `feedback_status` ;

CREATE TABLE IF NOT EXISTS `feedback_status` (
  `id` INT NOT NULL,
  `code` VARCHAR(32) NOT NULL,
  `description` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `description_UNIQUE` (`description` ASC) VISIBLE,
  UNIQUE INDEX `code_UNIQUE` (`code` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `feedback_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `feedback_type` ;

CREATE TABLE IF NOT EXISTS `feedback_type` (
  `id` INT NOT NULL,
  `code` VARCHAR(32) NOT NULL,
  `description` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `des_UNIQUE` (`description` ASC) VISIBLE,
  UNIQUE INDEX `code_UNIQUE` (`code` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `custodian_feedback`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `custodian_feedback` ;

CREATE TABLE IF NOT EXISTS `custodian_feedback` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `source_id` INT NOT NULL,
  `taxon_id` CHAR(8) NOT NULL,
  `dataset_id` VARCHAR(45) GENERATED ALWAYS AS (CONCAT(source_id, '_', taxon_id)),
  `feedback_status_id` INT NOT NULL,
  `feedback_type_id` INT NOT NULL,
  `data_import_id` INT NULL,
  `file_name` VARCHAR(255) NULL,
  `time_created` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `last_modified` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `last_updated` TIMESTAMP NULL,
  INDEX `fk_custodian_feedback_source1_idx` (`source_id` ASC) VISIBLE,
  INDEX `fk_custodian_feedback_taxon1_idx` (`taxon_id` ASC) VISIBLE,
  INDEX `fk_custodian_feedback_feedback_status1_idx` (`feedback_status_id` ASC) VISIBLE,
  INDEX `fk_custodian_feedback_feedback_type1_idx` (`feedback_type_id` ASC) VISIBLE,
  INDEX `fk_custodian_feedback_data_import1_idx` (`data_import_id` ASC) VISIBLE,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_custodian_feedback_source1`
    FOREIGN KEY (`source_id`)
    REFERENCES `source` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_custodian_feedback_taxon1`
    FOREIGN KEY (`taxon_id`)
    REFERENCES `taxon` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_custodian_feedback_feedback_status1`
    FOREIGN KEY (`feedback_status_id`)
    REFERENCES `feedback_status` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_custodian_feedback_feedback_type1`
    FOREIGN KEY (`feedback_type_id`)
    REFERENCES `feedback_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_custodian_feedback_data_import1`
    FOREIGN KEY (`data_import_id`)
    REFERENCES `data_import` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `custodian_feedback_answers`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `custodian_feedback_answers` ;

CREATE TABLE IF NOT EXISTS `custodian_feedback_answers` (
  `custodian_feedback_id` INT NOT NULL,
  `admin_type` TEXT NULL,
  `citation_agree` VARCHAR(10) NULL,
  `citation_agree_comments` TEXT NULL,
  `monitoring_for_trend` VARCHAR(10) NULL,
  `monitoring_for_trend_comments` TEXT NULL,
  `analyse_own_trends` VARCHAR(10) NULL,
  `analyse_own_trends_comments` TEXT NULL,
  `pop_1750` VARCHAR(10) NULL,
  `pop_1750_comments` TEXT NULL,
  `data_summary_agree` VARCHAR(10) NULL,
  `data_summary_agree_comments` TEXT NULL,
  `processing_agree` VARCHAR(10) NULL,
  `processing_agree_comments` TEXT NULL,
  `statistics_agree` VARCHAR(10) NULL,
  `statistics_agree_comments` TEXT NULL,
  `trend_agree` VARCHAR(10) NULL,
  `trend_agree_comments` TEXT NULL,
  `start_year` VARCHAR(10) NULL,
  `start_year_comments` TEXT NULL,
  `end_year` VARCHAR(10) NULL,
  `end_year_comments` TEXT NULL,
  `standardisation_of_method_effort` VARCHAR(10) NULL,
  `objective_of_monitoring` VARCHAR(10) NULL,
  `consistency_of_monitoring` VARCHAR(10) NULL,
  `monitoring_frequency_and_timing` VARCHAR(10) NULL,
  `absences_recorded` VARCHAR(10) NULL,
  `data_suitability_comments` TEXT NULL,
  `cost_data_provided` VARCHAR(20) NULL,
  `estimated_cost_dataset` VARCHAR(20) NULL,
  `cost_data_provided_comments` TEXT NULL,
  `custodian_comments` TEXT NULL,
  `internal_comments` TEXT NULL,
  `monitoring_program_information_contact` TEXT NULL,
  `monitoring_program_information_provided` VARCHAR(20) NULL,
  `effort_labour_paid_days_per_year` INT NULL,
  `effort_labour_volunteer_days_per_year` INT NULL,
  `effort_overheads_paid_days_per_year` INT NULL,
  `effort_overheads_volunteer_days_per_year` INT NULL,
  `effort_paid_staff_count` INT NULL,
  `effort_volunteer_count` INT NULL,
  `funding_cost_per_survey_aud` DECIMAL(18,2) NULL,
  `funding_total_investment_aud` DECIMAL(18,2) NULL,
  `funding_source_government_grants` VARCHAR(10) NULL,
  `funding_source_research_funds` VARCHAR(10) NULL,
  `funding_source_private_donations` VARCHAR(10) NULL,
  `funding_source_other` TEXT NULL,
  `funding_source_count` INT NULL,
  `leadership` TEXT NULL,
  `impact_used_for_management` VARCHAR(10) NULL,
  `impact_used_for_management_comments` TEXT NULL,
  `impact_organisation_responsible` TEXT NULL,
  `impact_management_changes` TEXT NULL,
  `data_availability` TEXT NULL,
  `succession_commitment` VARCHAR(10) NULL,
  `succession_commitment_comments` TEXT NULL,
  `succession_plan` VARCHAR(10) NULL,
  `succession_plan_comments` TEXT NULL,
  `design_statistical_power` VARCHAR(10) NULL,
  `design_statistical_power_comments` TEXT NULL,
  `design_other_factors` VARCHAR(10) NULL,
  `design_other_factors_comments` TEXT NULL,
  `co_benefits_other_species` VARCHAR(10) NULL,
  `co_benefits_other_species_comments` TEXT NULL,
  INDEX `fk_custodian_feedback_answers_custodian_feedback1_idx` (`custodian_feedback_id` ASC) VISIBLE,
  PRIMARY KEY (`custodian_feedback_id`),
  CONSTRAINT `fk_custodian_feedback_answers_custodian_feedback1`
    FOREIGN KEY (`custodian_feedback_id`)
    REFERENCES `custodian_feedback` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `dataset_stats`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `dataset_stats` ;

CREATE TABLE IF NOT EXISTS `dataset_stats` (
  `source_id` INT NOT NULL,
  `taxon_id` CHAR(8) NOT NULL,
  `data_import_id` INT NOT NULL,
  `stats_json` JSON NULL,
  INDEX `fk_dataset_stats_source1_idx` (`source_id` ASC) VISIBLE,
  INDEX `fk_dataset_stats_taxon1_idx` (`taxon_id` ASC) VISIBLE,
  INDEX `fk_dataset_stats_data_import1_idx` (`data_import_id` ASC) VISIBLE,
  PRIMARY KEY (`source_id`, `taxon_id`, `data_import_id`),
  CONSTRAINT `fk_dataset_stats_source1`
    FOREIGN KEY (`source_id`)
    REFERENCES `source` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_dataset_stats_taxon1`
    FOREIGN KEY (`taxon_id`)
    REFERENCES `taxon` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_dataset_stats_data_import1`
    FOREIGN KEY (`data_import_id`)
    REFERENCES `data_import` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `custodian_feedback_consent`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `custodian_feedback_consent` ;

CREATE TABLE IF NOT EXISTS `custodian_feedback_consent` (
  `user_id` INT NOT NULL,
  `consent_given` TINYINT(1) NULL,
  `consent_name` VARCHAR(255) NULL,
  INDEX `fk_custodian_feedback_consent_user_idx` (`user_id` ASC) VISIBLE,
  PRIMARY KEY (`user_id`),
  CONSTRAINT `fk_custodian_feedback_consent_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `data_import_taxon`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `data_import_taxon` ;

CREATE TABLE IF NOT EXISTS `data_import_taxon` (
  `data_import_id` INT NOT NULL,
  `taxon_id` CHAR(8) NOT NULL,
  PRIMARY KEY (`data_import_id`, `taxon_id`),
  INDEX `fk_data_import_taxon_taxon1_idx` (`taxon_id` ASC) VISIBLE,
  CONSTRAINT `fk_data_import_taxon_data_import1`
    FOREIGN KEY (`data_import_id`)
    REFERENCES `data_import` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_data_import_taxon_taxon1`
    FOREIGN KEY (`taxon_id`)
    REFERENCES `taxon` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `source_latest_approved_import`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `source_latest_approved_import` ;

CREATE TABLE IF NOT EXISTS `source_latest_approved_import` (
  `source_id` INT NOT NULL,
  `data_import_id` INT NOT NULL,
  PRIMARY KEY (`source_id`),
  INDEX `fk_source_latest_approved_import_data_import1_idx` (`data_import_id` ASC) VISIBLE,
  CONSTRAINT `fk_source_latest_approved_import_source1`
    FOREIGN KEY (`source_id`)
    REFERENCES `source` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_source_latest_approved_import_data_import1`
    FOREIGN KEY (`data_import_id`)
    REFERENCES `data_import` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- procedure update_t1_survey_region
-- -----------------------------------------------------
DROP procedure IF EXISTS `update_t1_survey_region`;

DELIMITER $$
CREATE PROCEDURE update_t1_survey_region(IN p_source_id INT)
BEGIN
DELETE FROM t1_survey_region
WHERE p_source_id IS NULL
OR survey_id IN (SELECT id FROM t1_survey WHERE t1_survey.source_id = p_source_id);
INSERT INTO t1_survey_region
SELECT t1_survey.id AS survey_id, MIN(region_subdiv.id) AS region_id
FROM t1_survey STRAIGHT_JOIN region_subdiv
WHERE ((p_source_id IS NULL) OR (t1_survey.source_id = p_source_id))
AND ST_Contains(region_subdiv.geometry, t1_survey.coords)
GROUP BY t1_survey.id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_custodian_feedback
-- -----------------------------------------------------
DROP procedure IF EXISTS `update_custodian_feedback`;

DELIMITER $$
CREATE PROCEDURE update_custodian_feedback()
BEGIN
    DROP TEMPORARY TABLE IF EXISTS tmp_latest_import;

    -- Latest import for each taxon dataset
    CREATE TEMPORARY TABLE tmp_latest_import AS
    SELECT data_import.source_id, data_import.id AS data_import_id, data_import_taxon.taxon_id
    FROM data_import
    JOIN source_latest_approved_import ON source_latest_approved_import.source_id = data_import.source_id AND source_latest_approved_import.data_import_id = data_import.id
    JOIN data_import_taxon ON data_import_taxon.data_import_id = data_import.id;

    -- Archive complete surveys
    UPDATE custodian_feedback
    LEFT JOIN tmp_latest_import ON (custodian_feedback.taxon_id = tmp_latest_import.taxon_id AND custodian_feedback.source_id = tmp_latest_import.source_id)
    SET feedback_status_id = (SELECT id FROM feedback_status WHERE code = 'archived')
    WHERE feedback_status_id = (SELECT id FROM feedback_status WHERE code = 'complete')
    AND feedback_type_id = (SELECT id FROM feedback_type WHERE code = 'integrated')
    AND custodian_feedback.data_import_id != COALESCE(tmp_latest_import.data_import_id, -1);

    -- Delete incomplete surveys
    DELETE FROM custodian_feedback
    WHERE feedback_type_id = (SELECT id FROM feedback_type WHERE code = 'integrated')
    AND feedback_status_id = (SELECT id FROM feedback_status WHERE code = 'incomplete')
    AND (source_id, taxon_id, data_import_id) NOT IN (SELECT source_id, taxon_id, data_import_id FROM tmp_latest_import);

    -- Update status of admin surveys
    UPDATE custodian_feedback
    JOIN tmp_latest_import ON (custodian_feedback.taxon_id = tmp_latest_import.taxon_id AND custodian_feedback.source_id = tmp_latest_import.source_id)
    SET custodian_feedback.feedback_status_id = (SELECT id FROM feedback_status WHERE code = 'incomplete'),
    custodian_feedback.data_import_id = tmp_latest_import.data_import_id
    WHERE custodian_feedback.data_import_id != tmp_latest_import.data_import_id
    AND feedback_type_id = (SELECT id FROM feedback_type WHERE code = 'admin');

    -- Add new incomplete surveys
    INSERT INTO custodian_feedback (source_id, taxon_id, data_import_id, feedback_type_id, feedback_status_id)
    SELECT
        tmp_latest_import.source_id,
        tmp_latest_import.taxon_id,
        tmp_latest_import.data_import_id,
        (SELECT id FROM feedback_type WHERE code = 'integrated'),
        (SELECT id FROM feedback_status WHERE code = 'incomplete')
    FROM tmp_latest_import
    LEFT JOIN custodian_feedback ON (
        custodian_feedback.source_id = tmp_latest_import.source_id
        AND custodian_feedback.taxon_id = tmp_latest_import.taxon_id
        AND custodian_feedback.data_import_id = tmp_latest_import.data_import_id
        AND custodian_feedback.feedback_type_id = (SELECT id FROM feedback_type WHERE code = 'integrated'))
    WHERE custodian_feedback.id IS NULL;

    -- Add new admin surveys
    INSERT INTO custodian_feedback (source_id, taxon_id, data_import_id, feedback_type_id, feedback_status_id)
    SELECT
        tmp_latest_import.source_id,
        tmp_latest_import.taxon_id,
        tmp_latest_import.data_import_id,
        (SELECT id FROM feedback_type WHERE code = 'admin'),
        (SELECT id FROM feedback_status WHERE code = 'incomplete')
    FROM tmp_latest_import
    LEFT JOIN custodian_feedback ON (
        custodian_feedback.source_id = tmp_latest_import.source_id
        AND custodian_feedback.taxon_id = tmp_latest_import.taxon_id
        AND custodian_feedback.feedback_type_id = (SELECT id FROM feedback_type WHERE code = 'admin'))
    WHERE custodian_feedback.id IS NULL;

    DROP TEMPORARY TABLE IF EXISTS tmp_latest_import;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure delete_source
-- -----------------------------------------------------
DROP procedure IF EXISTS `delete_source`;

DELIMITER $$
CREATE PROCEDURE delete_source(IN p_source_id INT)
BEGIN
    DELETE FROM user_source WHERE source_id = p_source_id;
    DELETE FROM dataset_stats WHERE source_id = p_source_id;
    DELETE custodian_feedback_answers FROM custodian_feedback, custodian_feedback_answers WHERE source_id = p_source_id AND custodian_feedback_answers.custodian_feedback_id = custodian_feedback.id;
    DELETE FROM custodian_feedback WHERE source_id = p_source_id;
    DELETE FROM data_import WHERE source_id = p_source_id;
    DELETE FROM source WHERE id = p_source_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_data_import_taxon
-- -----------------------------------------------------
DROP procedure IF EXISTS `update_data_import_taxon`;

DELIMITER $$
CREATE PROCEDURE update_data_import_taxon (IN p_data_import_id INT)
BEGIN
 INSERT IGNORE INTO data_import_taxon (data_import_id, taxon_id)
 SELECT DISTINCT p_data_import_id, t1_sighting.taxon_id
 FROM t1_survey
 JOIN t1_sighting ON t1_sighting.survey_id = t1_survey.id
 WHERE t1_survey.data_import_id = p_data_import_id
 UNION
 SELECT DISTINCT p_data_import_id, t2_sighting.taxon_id
 FROM t2_survey
 JOIN t2_sighting ON t2_sighting.survey_id = t2_survey.id
 WHERE t2_survey.data_import_id = p_data_import_id
 ;
END$$

DELIMITER ;

DELIMITER $$

DROP TRIGGER IF EXISTS `t1_survey_region_survey_ai` $$
CREATE DEFINER = CURRENT_USER TRIGGER `t1_survey_region_survey_ai` AFTER INSERT ON `t1_survey` FOR EACH ROW
REPLACE INTO t1_survey_region(survey_id, region_id) SELECT NEW.id, MIN(region_subdiv.id) AS region_id FROM region_subdiv WHERE ST_Contains(region_subdiv.geometry, NEW.coords) HAVING region_id IS NOT NULL$$


DROP TRIGGER IF EXISTS `t1_survey_region_survey_bu` $$
CREATE DEFINER = CURRENT_USER TRIGGER `t1_survey_region_survey_bu` BEFORE UPDATE ON `t1_survey` FOR EACH ROW
DELETE  FROM t1_survey_region WHERE survey_id = OLD.id$$


DROP TRIGGER IF EXISTS `t1_survey_region_survey_au` $$
CREATE DEFINER = CURRENT_USER TRIGGER `t1_survey_region_survey_au` AFTER UPDATE ON `t1_survey` FOR EACH ROW
REPLACE INTO t1_survey_region(survey_id, region_id) SELECT NEW.id, MIN(region_subdiv.id) AS region_id FROM region_subdiv WHERE ST_Contains(region_subdiv.geometry, NEW.coords) HAVING region_id IS NOT NULL$$


DROP TRIGGER IF EXISTS `t1_survey_region_survey_bd` $$
CREATE DEFINER = CURRENT_USER TRIGGER `t1_survey_region_survey_bd` BEFORE DELETE ON `t1_survey` FOR EACH ROW
DELETE  FROM t1_survey_region WHERE survey_id = OLD.id$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
