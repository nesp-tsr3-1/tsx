#!/bin/sh

### BEGIN INIT INFO
# Provides:          tsxapi
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: TSX API
# Description:       Threatened Species Index (TSX) API
### END INIT INFO
service_dir="/opt/tsx"
prog="tsxapi"
pidfile="/var/run/tsxapi.pid"
logfile="/var/log/tsxapi.log"

# Returns PID of currently running process, if any
getpid() {

    if [ -f "$pidfile" ]
    then

        read PID < "$pidfile"

        # If pidfile contains PID and PID is valid
        if [ -n "$PID" ] && ps "$PID" > /dev/null 2>&1
        then
            echo "$PID"
            return 0
        fi

    fi

    # pidfile/pid not found, or process is dead
    return 1

}

start() {
    [ -d ${service_dir} ] || exit 5
    echo -n "Starting $prog: "
    PID=`getpid`
    retval=$?
    if [ "$retval" -eq "0" ]
    then
         echo "SUCCESS"
         return 0
    fi

    twistd --pidfile=$pidfile --logfile=$logfile -n web --port tcp:8080 --wsgi tsx.api.api.app
    retval=$?

    case "$retval" in
        0)
            echo "SUCCESS"
            ;;
        *)
            echo "FAIL"
            ;;
    esac

    return $retval
}


stop() {
    echo -n "Stopping $prog: "

    PID=`getpid`
    retval=$?

    case "$retval" in
        0)
            if kill $PID > /dev/null 2>&1
            then
                echo "SUCCESS"
                return 0
            fi

            echo "FAIL"
            return 1
            ;;
        *)
            echo "SUCCESS (not running)"
            return 0
            ;;
    esac

}

restart() {
    stop && start
}

force_reload() {
    restart
}

status() {

    PID=`getpid`
    retval=$?

    case "$retval" in
        0)
            echo "$prog is running with PID=$PID."
            ;;
        *)
            echo "$prog is not running."
            ;;
    esac

    return $retval

}

case "$1" in
    start|stop|status|restart|force-reload)
        $1
        ;;
    try-restart)
        status && restart
        ;;
    *)
        echo "Usage: $0 {start|stop|status|restart|try-restart|force-reload}"
        exit 2
esac
exit $?
